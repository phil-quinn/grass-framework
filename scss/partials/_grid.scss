// Defaults which you can freely override
$column-width: 60px !default;
$gutter-width: 20px !default;
$columns: 12 !default;
$grid-debug: false !default;

/* The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/  */
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

/*//////////
// GRID //
//////////*/

@mixin grid-width() {
	$width: ($column-width*$columns) + ($gutter-width*$columns) - $gutter-width;
	width: $width;
	html.flexbox & {
		width: 100%;
	}
	@if $grid-debug {
		@debug "GRID-WIDTH";
		@debug "columns: #{$columns}";
		@debug "width: #{$width}";
	}
}

@mixin row($x:$columns) {

	/* if we are passed 0, set to 100% wide */
	@if $x == 0 {
		display: block;
		width: 100%;
	}
	@else {

		/* the visual width of the row */
		$width: ($column-width * $x) + (($x - 1) * $gutter-width);

		/* default, no flexbox styles */
		display: inline-block;
		width: $width;

		/* only for when we have js */
		html.js & {
			width: 100%;
			@include display-box;
			@include box-orient(horizontal);
			@include box-align(stretch);
		}
	}

	@if $grid-debug {
		@debug "ROW";
		@debug "width: #{$width}";
	}

}


@mixin column($x, $row_columns:$columns) {

	/* if we are passed 0, set to 100% wide */
	@if $x == 0 {
		display: block;
		width: 100%;
		margin-left: 0;
		margin-right: 0;
	}
	@else {

		$width: ($x * $column-width) + (($x - 1) * $gutter-width);
		$margin: $gutter-width;

		width: $width;
		margin-left: $margin;

		&:first-child { margin-left: 0; }

		/* default, no flexbox styles */
		display: inline;
		float: left;


		/* only for when we have js */
		html.js & {
			display: block;
			float: none;
			@include box-flex($x * $row_columns);
		}
	}
	@if $grid-debug {
		@debug "COLUMN";
		@debug "width: #{$width}";
		@debug "margin: #{$margin}";
	}

}

@mixin column-classes($columns:$columns) {

	@for $i from 1 through $columns {
		.cols-#{$i} { @include column( $i ); }
	}

}
